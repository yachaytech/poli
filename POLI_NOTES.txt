
provisional list of dependent modules: (Python3)
numpy       # python3-numpy - package manager
wxPython    # python3-wxgtk4.0, gtk libs, - package manager
scipy       # python3-sctpy - package manager
PIL         # python3-pil - package manager
osgeo/gdal  # python3-gdal - package manager
            # gdal-bin is handy for gdalinfo, etc.

# hdf4 and pyhdf is to read files like NOAA avhrr hdf files (ag_source.py)
libhdf4-dev # package manager

            # change to install directory
	    # cd /usr/local/src, and as su:
pyhdf.SD    # get tarball at https://pypi.org/project/pyhdf/#files
            # untar package, cd pyhdf-0.10.2
            # python3 setup.py install

minisom     # cd /usr/local/src as su:
            # git clone https://github.com/JustGlowing/minisom
            # edit minisom.py, change stdout to stderr - all instances
	    # python3 setup.py install

-----------------------------------------------------------------
Brief Intro:

The Python On-Line Imaging package is meant to process data in a streamed way,
similar to the Unix command line approach,

For example, to look for a particular string in a shell's history:

> history | grep render.py

would yield the POLI command to render an image.

> source.py -p FlyingMerkel.params | pca.py -p pca.params | render.py -f pca.png -c 0,1,2

(Parameter files are saved using the graphical interface)

another POLI command:

> wrf_source.py -f wrfout.nc -b 'T2:6,Q2:6,PSFC:6' | norm.py | msom.py | render.py -f wrfout.jpg

POLI also can be batched inside a Python script (more in later documentation)

POLI is mostly used with a graphical interface, showing the results for each filter in the stream.

HOW TO USE:
untar the POLI tarball, eg:
>cd ~
>untar xvf poli.alpha.tar

I link poli to poli.alpha so that I can work with different versions of poli

> ln -s poli.alpha poli

Be sure to include in your shell run command (.bashrc or .bash_profile, etc.):
export POLI_HOME=/home/pi/poli
export PYTHONPATH=$POLI_HOME/frame:$POLI_HOME/operators
export PATH=$POLI_HOME/bin:$PATH

POLI_HOME should point to your poli directory

restart a shell and use:
/home/pi/poli/bin/work.py /home/pi/poli/projects/default_poli

to invoke POLI.
----------------
Sets of filter operators can be grouped according to functionality, and are
held in the "package" directory. These are simply links to the operators.

A project file will specify both operators and images to use for a project.
There are two panels in POLI showing a tree for both package operators and
images. The packages are "tabbed".

POLI needs a source operator to initiate a stream.

For example, to test a SOM operator click on the "wrf" tab, expand the
"wrf" tree and double click on the "cetin" operator.

The cetin operator will dynamically load. Pressing the "apply" button will
generate a test image with 6 dimensions and will appear blank.
Above the tree panels is a "settings" tab
and from there you can select the "rainbow" button which will show some values
in the cetin image. Back in the "cetin" operator panel you can scroll through
the dimensions with the "-" and "+" buttons. If you press the "nav" tab, you
can also hover over the image and get pixel value reports.

Next, select the "norm" operator by double clicking the "norm" leaf in the
operator panel. Press "apply" to normalize the cetin image. Double click on
the "msom" operator and press "apply". Classes are labeled with imperceptible
grey levels so select the rainbow lut to see the classes.

To use the given classes, remove the "msom" operator by clicking on the 'x' in
the tab. Now select the "somclass" operator and press "apply". The somclass
operator uses the classes generated by the "msom" operator and reclassifies
the image.

To replicate minisom's tree example remove all the current operators. Click on
the "basic" tab in operator panel, also the "basic" tree, and double click on
the "source" operator.

Find the "gen_im" tab in the image panel by using the
arrows. Expand the "general" tree and double click on the "tree.jpg" leaf
to load the image. (You can also take a file from a file browser and
"drag and drop" into the file text panel.)

In the source operator, click the merge checkbox to see
the tree color image. Normalize the image as before by selecting the
"norm" operator (double click). Go back to the "wrf" package and select the
"msom" operator.

Change the operator parameters:
shape: (2,3)      # be sure to include parenthesis and comma, only 2-d
steps: 10000
rate: 0.2
neighborhood: bubble
output type: quantize

Press "apply", wait and then
Press "merge" tp colors

To use the WRF data it is necessary to select only a few variables, as the
whole output would be overwhelming.


These are some output variables from WRF:
TSK        surface skin temperature (K)
EMISS      surface emissivity                         
SWDOWN     downward shortwave at ground (W/m^2)   
GLW        downward longwave at ground (W/m^2)    
GRDFLX     ground heat flux (W/m^2)               
T2         temp at 2m (K)                         
PSFC       surface pressure (Pa)                  
Q2         QV (water vapor mixing ratio)m (kg/kg) 
U10        wind speed U at 10m (m/s)              
V10        wind speed V at 10m (m/s)                  

use this string in wrf_source to specify variables
TSK:6,EMISS:6,SWDOWN:6,GLW:6,GRDFLX:6,T2:6,PSFC:6,Q2:6,U10:6,V10:6

gets the 6th hour slice of the above variables, that is 07:00hr ecuador time
since we start at 01:00hr (06:00 utc)

We can use the "norm" and "msom" as before to explore classes based on
these variable.

Operator parameters can be saved and loaded by clicking on the "options" button.
Parameter files can also be used in the command line versions.
